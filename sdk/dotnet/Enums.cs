// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.Homelab
{
    [EnumType]
    public readonly struct DeploymentStrategyType : IEquatable<DeploymentStrategyType>
    {
        private readonly string _value;

        private DeploymentStrategyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DeploymentStrategyType Recreate { get; } = new DeploymentStrategyType("Recreate");
        public static DeploymentStrategyType Rolling { get; } = new DeploymentStrategyType("Rolling");

        public static bool operator ==(DeploymentStrategyType left, DeploymentStrategyType right) => left.Equals(right);
        public static bool operator !=(DeploymentStrategyType left, DeploymentStrategyType right) => !left.Equals(right);

        public static explicit operator string(DeploymentStrategyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeploymentStrategyType other && Equals(other);
        public bool Equals(DeploymentStrategyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServiceType : IEquatable<ServiceType>
    {
        private readonly string _value;

        private ServiceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceType ClusterIP { get; } = new ServiceType("ClusterIP");
        public static ServiceType LoadBalancer { get; } = new ServiceType("LoadBalancer");

        public static bool operator ==(ServiceType left, ServiceType right) => left.Equals(right);
        public static bool operator !=(ServiceType left, ServiceType right) => !left.Equals(right);

        public static explicit operator string(ServiceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceType other && Equals(other);
        public bool Equals(ServiceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
