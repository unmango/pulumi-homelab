// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package docker

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Container restart policy.
type RestartPolicy string

const (
	RestartPolicyAlways        = RestartPolicy("always")
	RestartPolicyNo            = RestartPolicy("no")
	RestartPolicyOnFailure     = RestartPolicy("on-failure")
	RestartPolicyUnlessStopped = RestartPolicy("unless-stopped")
)

func (RestartPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*RestartPolicy)(nil)).Elem()
}

func (e RestartPolicy) ToRestartPolicyOutput() RestartPolicyOutput {
	return pulumi.ToOutput(e).(RestartPolicyOutput)
}

func (e RestartPolicy) ToRestartPolicyOutputWithContext(ctx context.Context) RestartPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RestartPolicyOutput)
}

func (e RestartPolicy) ToRestartPolicyPtrOutput() RestartPolicyPtrOutput {
	return e.ToRestartPolicyPtrOutputWithContext(context.Background())
}

func (e RestartPolicy) ToRestartPolicyPtrOutputWithContext(ctx context.Context) RestartPolicyPtrOutput {
	return RestartPolicy(e).ToRestartPolicyOutputWithContext(ctx).ToRestartPolicyPtrOutputWithContext(ctx)
}

func (e RestartPolicy) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RestartPolicy) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RestartPolicy) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RestartPolicy) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RestartPolicyOutput struct{ *pulumi.OutputState }

func (RestartPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestartPolicy)(nil)).Elem()
}

func (o RestartPolicyOutput) ToRestartPolicyOutput() RestartPolicyOutput {
	return o
}

func (o RestartPolicyOutput) ToRestartPolicyOutputWithContext(ctx context.Context) RestartPolicyOutput {
	return o
}

func (o RestartPolicyOutput) ToRestartPolicyPtrOutput() RestartPolicyPtrOutput {
	return o.ToRestartPolicyPtrOutputWithContext(context.Background())
}

func (o RestartPolicyOutput) ToRestartPolicyPtrOutputWithContext(ctx context.Context) RestartPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RestartPolicy) *RestartPolicy {
		return &v
	}).(RestartPolicyPtrOutput)
}

func (o RestartPolicyOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RestartPolicyOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RestartPolicy) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RestartPolicyOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RestartPolicyOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RestartPolicy) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RestartPolicyPtrOutput struct{ *pulumi.OutputState }

func (RestartPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RestartPolicy)(nil)).Elem()
}

func (o RestartPolicyPtrOutput) ToRestartPolicyPtrOutput() RestartPolicyPtrOutput {
	return o
}

func (o RestartPolicyPtrOutput) ToRestartPolicyPtrOutputWithContext(ctx context.Context) RestartPolicyPtrOutput {
	return o
}

func (o RestartPolicyPtrOutput) Elem() RestartPolicyOutput {
	return o.ApplyT(func(v *RestartPolicy) RestartPolicy {
		if v != nil {
			return *v
		}
		var ret RestartPolicy
		return ret
	}).(RestartPolicyOutput)
}

func (o RestartPolicyPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RestartPolicyPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RestartPolicy) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RestartPolicyInput is an input type that accepts RestartPolicyArgs and RestartPolicyOutput values.
// You can construct a concrete instance of `RestartPolicyInput` via:
//
//          RestartPolicyArgs{...}
type RestartPolicyInput interface {
	pulumi.Input

	ToRestartPolicyOutput() RestartPolicyOutput
	ToRestartPolicyOutputWithContext(context.Context) RestartPolicyOutput
}

var restartPolicyPtrType = reflect.TypeOf((**RestartPolicy)(nil)).Elem()

type RestartPolicyPtrInput interface {
	pulumi.Input

	ToRestartPolicyPtrOutput() RestartPolicyPtrOutput
	ToRestartPolicyPtrOutputWithContext(context.Context) RestartPolicyPtrOutput
}

type restartPolicyPtr string

func RestartPolicyPtr(v string) RestartPolicyPtrInput {
	return (*restartPolicyPtr)(&v)
}

func (*restartPolicyPtr) ElementType() reflect.Type {
	return restartPolicyPtrType
}

func (in *restartPolicyPtr) ToRestartPolicyPtrOutput() RestartPolicyPtrOutput {
	return pulumi.ToOutput(in).(RestartPolicyPtrOutput)
}

func (in *restartPolicyPtr) ToRestartPolicyPtrOutputWithContext(ctx context.Context) RestartPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RestartPolicyPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RestartPolicyInput)(nil)).Elem(), RestartPolicy("always"))
	pulumi.RegisterInputType(reflect.TypeOf((*RestartPolicyPtrInput)(nil)).Elem(), RestartPolicy("always"))
	pulumi.RegisterOutputType(RestartPolicyOutput{})
	pulumi.RegisterOutputType(RestartPolicyPtrOutput{})
}
