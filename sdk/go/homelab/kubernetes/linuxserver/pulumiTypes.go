// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package linuxserver

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unmango/pulumi-homelab/sdk/go/homelab/kubernetes"
	"github.com/unmango/pulumi-homelab/sdk/go/homelab/linuxserver"
)

// Heimdall persistence options.
type HeimdallPersistence struct {
	// Access modes for the persistent volume claim template.
	AccessModes []string `pulumi:"accessModes"`
	// Whether to enable persistence or not.
	Enabled *bool `pulumi:"enabled"`
	// Size of the volume to request from the storage class.
	Size *string `pulumi:"size"`
	// Name of the storage class to use in the persistent volume claim template.
	StorageClass *string `pulumi:"storageClass"`
}

// Defaults sets the appropriate defaults for HeimdallPersistence
func (val *HeimdallPersistence) Defaults() *HeimdallPersistence {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Enabled) {
		enabled_ := false
		tmp.Enabled = &enabled_
	}
	if isZero(tmp.Size) {
		size_ := "1Gi"
		tmp.Size = &size_
	}
	return &tmp
}

// HeimdallPersistenceInput is an input type that accepts HeimdallPersistenceArgs and HeimdallPersistenceOutput values.
// You can construct a concrete instance of `HeimdallPersistenceInput` via:
//
//          HeimdallPersistenceArgs{...}
type HeimdallPersistenceInput interface {
	pulumi.Input

	ToHeimdallPersistenceOutput() HeimdallPersistenceOutput
	ToHeimdallPersistenceOutputWithContext(context.Context) HeimdallPersistenceOutput
}

// Heimdall persistence options.
type HeimdallPersistenceArgs struct {
	// Access modes for the persistent volume claim template.
	AccessModes pulumi.StringArrayInput `pulumi:"accessModes"`
	// Whether to enable persistence or not.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Size of the volume to request from the storage class.
	Size pulumi.StringPtrInput `pulumi:"size"`
	// Name of the storage class to use in the persistent volume claim template.
	StorageClass pulumi.StringPtrInput `pulumi:"storageClass"`
}

func (HeimdallPersistenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HeimdallPersistence)(nil)).Elem()
}

func (i HeimdallPersistenceArgs) ToHeimdallPersistenceOutput() HeimdallPersistenceOutput {
	return i.ToHeimdallPersistenceOutputWithContext(context.Background())
}

func (i HeimdallPersistenceArgs) ToHeimdallPersistenceOutputWithContext(ctx context.Context) HeimdallPersistenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeimdallPersistenceOutput)
}

func (i HeimdallPersistenceArgs) ToHeimdallPersistencePtrOutput() HeimdallPersistencePtrOutput {
	return i.ToHeimdallPersistencePtrOutputWithContext(context.Background())
}

func (i HeimdallPersistenceArgs) ToHeimdallPersistencePtrOutputWithContext(ctx context.Context) HeimdallPersistencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeimdallPersistenceOutput).ToHeimdallPersistencePtrOutputWithContext(ctx)
}

// HeimdallPersistencePtrInput is an input type that accepts HeimdallPersistenceArgs, HeimdallPersistencePtr and HeimdallPersistencePtrOutput values.
// You can construct a concrete instance of `HeimdallPersistencePtrInput` via:
//
//          HeimdallPersistenceArgs{...}
//
//  or:
//
//          nil
type HeimdallPersistencePtrInput interface {
	pulumi.Input

	ToHeimdallPersistencePtrOutput() HeimdallPersistencePtrOutput
	ToHeimdallPersistencePtrOutputWithContext(context.Context) HeimdallPersistencePtrOutput
}

type heimdallPersistencePtrType HeimdallPersistenceArgs

func HeimdallPersistencePtr(v *HeimdallPersistenceArgs) HeimdallPersistencePtrInput {
	return (*heimdallPersistencePtrType)(v)
}

func (*heimdallPersistencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HeimdallPersistence)(nil)).Elem()
}

func (i *heimdallPersistencePtrType) ToHeimdallPersistencePtrOutput() HeimdallPersistencePtrOutput {
	return i.ToHeimdallPersistencePtrOutputWithContext(context.Background())
}

func (i *heimdallPersistencePtrType) ToHeimdallPersistencePtrOutputWithContext(ctx context.Context) HeimdallPersistencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeimdallPersistencePtrOutput)
}

// Heimdall persistence options.
type HeimdallPersistenceOutput struct{ *pulumi.OutputState }

func (HeimdallPersistenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeimdallPersistence)(nil)).Elem()
}

func (o HeimdallPersistenceOutput) ToHeimdallPersistenceOutput() HeimdallPersistenceOutput {
	return o
}

func (o HeimdallPersistenceOutput) ToHeimdallPersistenceOutputWithContext(ctx context.Context) HeimdallPersistenceOutput {
	return o
}

func (o HeimdallPersistenceOutput) ToHeimdallPersistencePtrOutput() HeimdallPersistencePtrOutput {
	return o.ToHeimdallPersistencePtrOutputWithContext(context.Background())
}

func (o HeimdallPersistenceOutput) ToHeimdallPersistencePtrOutputWithContext(ctx context.Context) HeimdallPersistencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HeimdallPersistence) *HeimdallPersistence {
		return &v
	}).(HeimdallPersistencePtrOutput)
}

// Access modes for the persistent volume claim template.
func (o HeimdallPersistenceOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HeimdallPersistence) []string { return v.AccessModes }).(pulumi.StringArrayOutput)
}

// Whether to enable persistence or not.
func (o HeimdallPersistenceOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HeimdallPersistence) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Size of the volume to request from the storage class.
func (o HeimdallPersistenceOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HeimdallPersistence) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// Name of the storage class to use in the persistent volume claim template.
func (o HeimdallPersistenceOutput) StorageClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HeimdallPersistence) *string { return v.StorageClass }).(pulumi.StringPtrOutput)
}

type HeimdallPersistencePtrOutput struct{ *pulumi.OutputState }

func (HeimdallPersistencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HeimdallPersistence)(nil)).Elem()
}

func (o HeimdallPersistencePtrOutput) ToHeimdallPersistencePtrOutput() HeimdallPersistencePtrOutput {
	return o
}

func (o HeimdallPersistencePtrOutput) ToHeimdallPersistencePtrOutputWithContext(ctx context.Context) HeimdallPersistencePtrOutput {
	return o
}

func (o HeimdallPersistencePtrOutput) Elem() HeimdallPersistenceOutput {
	return o.ApplyT(func(v *HeimdallPersistence) HeimdallPersistence {
		if v != nil {
			return *v
		}
		var ret HeimdallPersistence
		return ret
	}).(HeimdallPersistenceOutput)
}

// Access modes for the persistent volume claim template.
func (o HeimdallPersistencePtrOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HeimdallPersistence) []string {
		if v == nil {
			return nil
		}
		return v.AccessModes
	}).(pulumi.StringArrayOutput)
}

// Whether to enable persistence or not.
func (o HeimdallPersistencePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HeimdallPersistence) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Size of the volume to request from the storage class.
func (o HeimdallPersistencePtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HeimdallPersistence) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// Name of the storage class to use in the persistent volume claim template.
func (o HeimdallPersistencePtrOutput) StorageClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HeimdallPersistence) *string {
		if v == nil {
			return nil
		}
		return v.StorageClass
	}).(pulumi.StringPtrOutput)
}

// Arguments for the kubernetes service.
type HeimdallService struct {
	// Port arguments for the container.
	Ports *linuxserver.HeimdallPorts `pulumi:"ports"`
	// Type of service to create.
	Type *kubernetes.ServiceType `pulumi:"type"`
}

// HeimdallServiceInput is an input type that accepts HeimdallServiceArgs and HeimdallServiceOutput values.
// You can construct a concrete instance of `HeimdallServiceInput` via:
//
//          HeimdallServiceArgs{...}
type HeimdallServiceInput interface {
	pulumi.Input

	ToHeimdallServiceOutput() HeimdallServiceOutput
	ToHeimdallServiceOutputWithContext(context.Context) HeimdallServiceOutput
}

// Arguments for the kubernetes service.
type HeimdallServiceArgs struct {
	// Port arguments for the container.
	Ports linuxserver.HeimdallPortsPtrInput `pulumi:"ports"`
	// Type of service to create.
	Type kubernetes.ServiceTypePtrInput `pulumi:"type"`
}

func (HeimdallServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HeimdallService)(nil)).Elem()
}

func (i HeimdallServiceArgs) ToHeimdallServiceOutput() HeimdallServiceOutput {
	return i.ToHeimdallServiceOutputWithContext(context.Background())
}

func (i HeimdallServiceArgs) ToHeimdallServiceOutputWithContext(ctx context.Context) HeimdallServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeimdallServiceOutput)
}

func (i HeimdallServiceArgs) ToHeimdallServicePtrOutput() HeimdallServicePtrOutput {
	return i.ToHeimdallServicePtrOutputWithContext(context.Background())
}

func (i HeimdallServiceArgs) ToHeimdallServicePtrOutputWithContext(ctx context.Context) HeimdallServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeimdallServiceOutput).ToHeimdallServicePtrOutputWithContext(ctx)
}

// HeimdallServicePtrInput is an input type that accepts HeimdallServiceArgs, HeimdallServicePtr and HeimdallServicePtrOutput values.
// You can construct a concrete instance of `HeimdallServicePtrInput` via:
//
//          HeimdallServiceArgs{...}
//
//  or:
//
//          nil
type HeimdallServicePtrInput interface {
	pulumi.Input

	ToHeimdallServicePtrOutput() HeimdallServicePtrOutput
	ToHeimdallServicePtrOutputWithContext(context.Context) HeimdallServicePtrOutput
}

type heimdallServicePtrType HeimdallServiceArgs

func HeimdallServicePtr(v *HeimdallServiceArgs) HeimdallServicePtrInput {
	return (*heimdallServicePtrType)(v)
}

func (*heimdallServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HeimdallService)(nil)).Elem()
}

func (i *heimdallServicePtrType) ToHeimdallServicePtrOutput() HeimdallServicePtrOutput {
	return i.ToHeimdallServicePtrOutputWithContext(context.Background())
}

func (i *heimdallServicePtrType) ToHeimdallServicePtrOutputWithContext(ctx context.Context) HeimdallServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeimdallServicePtrOutput)
}

// Arguments for the kubernetes service.
type HeimdallServiceOutput struct{ *pulumi.OutputState }

func (HeimdallServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeimdallService)(nil)).Elem()
}

func (o HeimdallServiceOutput) ToHeimdallServiceOutput() HeimdallServiceOutput {
	return o
}

func (o HeimdallServiceOutput) ToHeimdallServiceOutputWithContext(ctx context.Context) HeimdallServiceOutput {
	return o
}

func (o HeimdallServiceOutput) ToHeimdallServicePtrOutput() HeimdallServicePtrOutput {
	return o.ToHeimdallServicePtrOutputWithContext(context.Background())
}

func (o HeimdallServiceOutput) ToHeimdallServicePtrOutputWithContext(ctx context.Context) HeimdallServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HeimdallService) *HeimdallService {
		return &v
	}).(HeimdallServicePtrOutput)
}

// Port arguments for the container.
func (o HeimdallServiceOutput) Ports() linuxserver.HeimdallPortsPtrOutput {
	return o.ApplyT(func(v HeimdallService) *linuxserver.HeimdallPorts { return v.Ports }).(linuxserver.HeimdallPortsPtrOutput)
}

// Type of service to create.
func (o HeimdallServiceOutput) Type() kubernetes.ServiceTypePtrOutput {
	return o.ApplyT(func(v HeimdallService) *kubernetes.ServiceType { return v.Type }).(kubernetes.ServiceTypePtrOutput)
}

type HeimdallServicePtrOutput struct{ *pulumi.OutputState }

func (HeimdallServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HeimdallService)(nil)).Elem()
}

func (o HeimdallServicePtrOutput) ToHeimdallServicePtrOutput() HeimdallServicePtrOutput {
	return o
}

func (o HeimdallServicePtrOutput) ToHeimdallServicePtrOutputWithContext(ctx context.Context) HeimdallServicePtrOutput {
	return o
}

func (o HeimdallServicePtrOutput) Elem() HeimdallServiceOutput {
	return o.ApplyT(func(v *HeimdallService) HeimdallService {
		if v != nil {
			return *v
		}
		var ret HeimdallService
		return ret
	}).(HeimdallServiceOutput)
}

// Port arguments for the container.
func (o HeimdallServicePtrOutput) Ports() linuxserver.HeimdallPortsPtrOutput {
	return o.ApplyT(func(v *HeimdallService) *linuxserver.HeimdallPorts {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(linuxserver.HeimdallPortsPtrOutput)
}

// Type of service to create.
func (o HeimdallServicePtrOutput) Type() kubernetes.ServiceTypePtrOutput {
	return o.ApplyT(func(v *HeimdallService) *kubernetes.ServiceType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(kubernetes.ServiceTypePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HeimdallPersistenceInput)(nil)).Elem(), HeimdallPersistenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeimdallPersistencePtrInput)(nil)).Elem(), HeimdallPersistenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeimdallServiceInput)(nil)).Elem(), HeimdallServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeimdallServicePtrInput)(nil)).Elem(), HeimdallServiceArgs{})
	pulumi.RegisterOutputType(HeimdallPersistenceOutput{})
	pulumi.RegisterOutputType(HeimdallPersistencePtrOutput{})
	pulumi.RegisterOutputType(HeimdallServiceOutput{})
	pulumi.RegisterOutputType(HeimdallServicePtrOutput{})
}
