// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package homelab

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KubernetesLinuxServerRadarr struct {
	pulumi.ResourceState
}

// NewKubernetesLinuxServerRadarr registers a new resource with the given unique name, arguments, and options.
func NewKubernetesLinuxServerRadarr(ctx *pulumi.Context,
	name string, args *KubernetesLinuxServerRadarrArgs, opts ...pulumi.ResourceOption) (*KubernetesLinuxServerRadarr, error) {
	if args == nil {
		args = &KubernetesLinuxServerRadarrArgs{}
	}

	var resource KubernetesLinuxServerRadarr
	err := ctx.RegisterRemoteComponentResource("homelab:index:KubernetesLinuxServerRadarr", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type kubernetesLinuxServerRadarrArgs struct {
	Deployment *KubernetesDeployment `pulumi:"deployment"`
	Image      interface{}           `pulumi:"image"`
	// Optional name override.
	Name *string `pulumi:"name"`
	// Namespace to provision resources in.
	Namespace *string            `pulumi:"namespace"`
	Service   *KubernetesService `pulumi:"service"`
}

// The set of arguments for constructing a KubernetesLinuxServerRadarr resource.
type KubernetesLinuxServerRadarrArgs struct {
	Deployment KubernetesDeploymentPtrInput
	Image      pulumi.Input
	// Optional name override.
	Name pulumi.StringPtrInput
	// Namespace to provision resources in.
	Namespace pulumi.StringPtrInput
	Service   KubernetesServicePtrInput
}

func (KubernetesLinuxServerRadarrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesLinuxServerRadarrArgs)(nil)).Elem()
}

type KubernetesLinuxServerRadarrInput interface {
	pulumi.Input

	ToKubernetesLinuxServerRadarrOutput() KubernetesLinuxServerRadarrOutput
	ToKubernetesLinuxServerRadarrOutputWithContext(ctx context.Context) KubernetesLinuxServerRadarrOutput
}

func (*KubernetesLinuxServerRadarr) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesLinuxServerRadarr)(nil))
}

func (i *KubernetesLinuxServerRadarr) ToKubernetesLinuxServerRadarrOutput() KubernetesLinuxServerRadarrOutput {
	return i.ToKubernetesLinuxServerRadarrOutputWithContext(context.Background())
}

func (i *KubernetesLinuxServerRadarr) ToKubernetesLinuxServerRadarrOutputWithContext(ctx context.Context) KubernetesLinuxServerRadarrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesLinuxServerRadarrOutput)
}

func (i *KubernetesLinuxServerRadarr) ToKubernetesLinuxServerRadarrPtrOutput() KubernetesLinuxServerRadarrPtrOutput {
	return i.ToKubernetesLinuxServerRadarrPtrOutputWithContext(context.Background())
}

func (i *KubernetesLinuxServerRadarr) ToKubernetesLinuxServerRadarrPtrOutputWithContext(ctx context.Context) KubernetesLinuxServerRadarrPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesLinuxServerRadarrPtrOutput)
}

type KubernetesLinuxServerRadarrPtrInput interface {
	pulumi.Input

	ToKubernetesLinuxServerRadarrPtrOutput() KubernetesLinuxServerRadarrPtrOutput
	ToKubernetesLinuxServerRadarrPtrOutputWithContext(ctx context.Context) KubernetesLinuxServerRadarrPtrOutput
}

type kubernetesLinuxServerRadarrPtrType KubernetesLinuxServerRadarrArgs

func (*kubernetesLinuxServerRadarrPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesLinuxServerRadarr)(nil))
}

func (i *kubernetesLinuxServerRadarrPtrType) ToKubernetesLinuxServerRadarrPtrOutput() KubernetesLinuxServerRadarrPtrOutput {
	return i.ToKubernetesLinuxServerRadarrPtrOutputWithContext(context.Background())
}

func (i *kubernetesLinuxServerRadarrPtrType) ToKubernetesLinuxServerRadarrPtrOutputWithContext(ctx context.Context) KubernetesLinuxServerRadarrPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesLinuxServerRadarrPtrOutput)
}

// KubernetesLinuxServerRadarrArrayInput is an input type that accepts KubernetesLinuxServerRadarrArray and KubernetesLinuxServerRadarrArrayOutput values.
// You can construct a concrete instance of `KubernetesLinuxServerRadarrArrayInput` via:
//
//          KubernetesLinuxServerRadarrArray{ KubernetesLinuxServerRadarrArgs{...} }
type KubernetesLinuxServerRadarrArrayInput interface {
	pulumi.Input

	ToKubernetesLinuxServerRadarrArrayOutput() KubernetesLinuxServerRadarrArrayOutput
	ToKubernetesLinuxServerRadarrArrayOutputWithContext(context.Context) KubernetesLinuxServerRadarrArrayOutput
}

type KubernetesLinuxServerRadarrArray []KubernetesLinuxServerRadarrInput

func (KubernetesLinuxServerRadarrArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*KubernetesLinuxServerRadarr)(nil))
}

func (i KubernetesLinuxServerRadarrArray) ToKubernetesLinuxServerRadarrArrayOutput() KubernetesLinuxServerRadarrArrayOutput {
	return i.ToKubernetesLinuxServerRadarrArrayOutputWithContext(context.Background())
}

func (i KubernetesLinuxServerRadarrArray) ToKubernetesLinuxServerRadarrArrayOutputWithContext(ctx context.Context) KubernetesLinuxServerRadarrArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesLinuxServerRadarrArrayOutput)
}

// KubernetesLinuxServerRadarrMapInput is an input type that accepts KubernetesLinuxServerRadarrMap and KubernetesLinuxServerRadarrMapOutput values.
// You can construct a concrete instance of `KubernetesLinuxServerRadarrMapInput` via:
//
//          KubernetesLinuxServerRadarrMap{ "key": KubernetesLinuxServerRadarrArgs{...} }
type KubernetesLinuxServerRadarrMapInput interface {
	pulumi.Input

	ToKubernetesLinuxServerRadarrMapOutput() KubernetesLinuxServerRadarrMapOutput
	ToKubernetesLinuxServerRadarrMapOutputWithContext(context.Context) KubernetesLinuxServerRadarrMapOutput
}

type KubernetesLinuxServerRadarrMap map[string]KubernetesLinuxServerRadarrInput

func (KubernetesLinuxServerRadarrMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*KubernetesLinuxServerRadarr)(nil))
}

func (i KubernetesLinuxServerRadarrMap) ToKubernetesLinuxServerRadarrMapOutput() KubernetesLinuxServerRadarrMapOutput {
	return i.ToKubernetesLinuxServerRadarrMapOutputWithContext(context.Background())
}

func (i KubernetesLinuxServerRadarrMap) ToKubernetesLinuxServerRadarrMapOutputWithContext(ctx context.Context) KubernetesLinuxServerRadarrMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesLinuxServerRadarrMapOutput)
}

type KubernetesLinuxServerRadarrOutput struct {
	*pulumi.OutputState
}

func (KubernetesLinuxServerRadarrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesLinuxServerRadarr)(nil))
}

func (o KubernetesLinuxServerRadarrOutput) ToKubernetesLinuxServerRadarrOutput() KubernetesLinuxServerRadarrOutput {
	return o
}

func (o KubernetesLinuxServerRadarrOutput) ToKubernetesLinuxServerRadarrOutputWithContext(ctx context.Context) KubernetesLinuxServerRadarrOutput {
	return o
}

func (o KubernetesLinuxServerRadarrOutput) ToKubernetesLinuxServerRadarrPtrOutput() KubernetesLinuxServerRadarrPtrOutput {
	return o.ToKubernetesLinuxServerRadarrPtrOutputWithContext(context.Background())
}

func (o KubernetesLinuxServerRadarrOutput) ToKubernetesLinuxServerRadarrPtrOutputWithContext(ctx context.Context) KubernetesLinuxServerRadarrPtrOutput {
	return o.ApplyT(func(v KubernetesLinuxServerRadarr) *KubernetesLinuxServerRadarr {
		return &v
	}).(KubernetesLinuxServerRadarrPtrOutput)
}

type KubernetesLinuxServerRadarrPtrOutput struct {
	*pulumi.OutputState
}

func (KubernetesLinuxServerRadarrPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesLinuxServerRadarr)(nil))
}

func (o KubernetesLinuxServerRadarrPtrOutput) ToKubernetesLinuxServerRadarrPtrOutput() KubernetesLinuxServerRadarrPtrOutput {
	return o
}

func (o KubernetesLinuxServerRadarrPtrOutput) ToKubernetesLinuxServerRadarrPtrOutputWithContext(ctx context.Context) KubernetesLinuxServerRadarrPtrOutput {
	return o
}

type KubernetesLinuxServerRadarrArrayOutput struct{ *pulumi.OutputState }

func (KubernetesLinuxServerRadarrArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KubernetesLinuxServerRadarr)(nil))
}

func (o KubernetesLinuxServerRadarrArrayOutput) ToKubernetesLinuxServerRadarrArrayOutput() KubernetesLinuxServerRadarrArrayOutput {
	return o
}

func (o KubernetesLinuxServerRadarrArrayOutput) ToKubernetesLinuxServerRadarrArrayOutputWithContext(ctx context.Context) KubernetesLinuxServerRadarrArrayOutput {
	return o
}

func (o KubernetesLinuxServerRadarrArrayOutput) Index(i pulumi.IntInput) KubernetesLinuxServerRadarrOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KubernetesLinuxServerRadarr {
		return vs[0].([]KubernetesLinuxServerRadarr)[vs[1].(int)]
	}).(KubernetesLinuxServerRadarrOutput)
}

type KubernetesLinuxServerRadarrMapOutput struct{ *pulumi.OutputState }

func (KubernetesLinuxServerRadarrMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KubernetesLinuxServerRadarr)(nil))
}

func (o KubernetesLinuxServerRadarrMapOutput) ToKubernetesLinuxServerRadarrMapOutput() KubernetesLinuxServerRadarrMapOutput {
	return o
}

func (o KubernetesLinuxServerRadarrMapOutput) ToKubernetesLinuxServerRadarrMapOutputWithContext(ctx context.Context) KubernetesLinuxServerRadarrMapOutput {
	return o
}

func (o KubernetesLinuxServerRadarrMapOutput) MapIndex(k pulumi.StringInput) KubernetesLinuxServerRadarrOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) KubernetesLinuxServerRadarr {
		return vs[0].(map[string]KubernetesLinuxServerRadarr)[vs[1].(string)]
	}).(KubernetesLinuxServerRadarrOutput)
}

func init() {
	pulumi.RegisterOutputType(KubernetesLinuxServerRadarrOutput{})
	pulumi.RegisterOutputType(KubernetesLinuxServerRadarrPtrOutput{})
	pulumi.RegisterOutputType(KubernetesLinuxServerRadarrArrayOutput{})
	pulumi.RegisterOutputType(KubernetesLinuxServerRadarrMapOutput{})
}
