// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package linuxserver

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Port arguments for the service.
type HeimdallPorts struct {
	// External port to expose container port 80.
	Http *float64 `pulumi:"http"`
	// External port to expose container port 443.
	Https *float64 `pulumi:"https"`
}

// HeimdallPortsInput is an input type that accepts HeimdallPortsArgs and HeimdallPortsOutput values.
// You can construct a concrete instance of `HeimdallPortsInput` via:
//
//          HeimdallPortsArgs{...}
type HeimdallPortsInput interface {
	pulumi.Input

	ToHeimdallPortsOutput() HeimdallPortsOutput
	ToHeimdallPortsOutputWithContext(context.Context) HeimdallPortsOutput
}

// Port arguments for the service.
type HeimdallPortsArgs struct {
	// External port to expose container port 80.
	Http pulumi.Float64PtrInput `pulumi:"http"`
	// External port to expose container port 443.
	Https pulumi.Float64PtrInput `pulumi:"https"`
}

func (HeimdallPortsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HeimdallPorts)(nil)).Elem()
}

func (i HeimdallPortsArgs) ToHeimdallPortsOutput() HeimdallPortsOutput {
	return i.ToHeimdallPortsOutputWithContext(context.Background())
}

func (i HeimdallPortsArgs) ToHeimdallPortsOutputWithContext(ctx context.Context) HeimdallPortsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeimdallPortsOutput)
}

func (i HeimdallPortsArgs) ToHeimdallPortsPtrOutput() HeimdallPortsPtrOutput {
	return i.ToHeimdallPortsPtrOutputWithContext(context.Background())
}

func (i HeimdallPortsArgs) ToHeimdallPortsPtrOutputWithContext(ctx context.Context) HeimdallPortsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeimdallPortsOutput).ToHeimdallPortsPtrOutputWithContext(ctx)
}

// HeimdallPortsPtrInput is an input type that accepts HeimdallPortsArgs, HeimdallPortsPtr and HeimdallPortsPtrOutput values.
// You can construct a concrete instance of `HeimdallPortsPtrInput` via:
//
//          HeimdallPortsArgs{...}
//
//  or:
//
//          nil
type HeimdallPortsPtrInput interface {
	pulumi.Input

	ToHeimdallPortsPtrOutput() HeimdallPortsPtrOutput
	ToHeimdallPortsPtrOutputWithContext(context.Context) HeimdallPortsPtrOutput
}

type heimdallPortsPtrType HeimdallPortsArgs

func HeimdallPortsPtr(v *HeimdallPortsArgs) HeimdallPortsPtrInput {
	return (*heimdallPortsPtrType)(v)
}

func (*heimdallPortsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HeimdallPorts)(nil)).Elem()
}

func (i *heimdallPortsPtrType) ToHeimdallPortsPtrOutput() HeimdallPortsPtrOutput {
	return i.ToHeimdallPortsPtrOutputWithContext(context.Background())
}

func (i *heimdallPortsPtrType) ToHeimdallPortsPtrOutputWithContext(ctx context.Context) HeimdallPortsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeimdallPortsPtrOutput)
}

// Port arguments for the service.
type HeimdallPortsOutput struct{ *pulumi.OutputState }

func (HeimdallPortsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeimdallPorts)(nil)).Elem()
}

func (o HeimdallPortsOutput) ToHeimdallPortsOutput() HeimdallPortsOutput {
	return o
}

func (o HeimdallPortsOutput) ToHeimdallPortsOutputWithContext(ctx context.Context) HeimdallPortsOutput {
	return o
}

func (o HeimdallPortsOutput) ToHeimdallPortsPtrOutput() HeimdallPortsPtrOutput {
	return o.ToHeimdallPortsPtrOutputWithContext(context.Background())
}

func (o HeimdallPortsOutput) ToHeimdallPortsPtrOutputWithContext(ctx context.Context) HeimdallPortsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HeimdallPorts) *HeimdallPorts {
		return &v
	}).(HeimdallPortsPtrOutput)
}

// External port to expose container port 80.
func (o HeimdallPortsOutput) Http() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v HeimdallPorts) *float64 { return v.Http }).(pulumi.Float64PtrOutput)
}

// External port to expose container port 443.
func (o HeimdallPortsOutput) Https() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v HeimdallPorts) *float64 { return v.Https }).(pulumi.Float64PtrOutput)
}

type HeimdallPortsPtrOutput struct{ *pulumi.OutputState }

func (HeimdallPortsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HeimdallPorts)(nil)).Elem()
}

func (o HeimdallPortsPtrOutput) ToHeimdallPortsPtrOutput() HeimdallPortsPtrOutput {
	return o
}

func (o HeimdallPortsPtrOutput) ToHeimdallPortsPtrOutputWithContext(ctx context.Context) HeimdallPortsPtrOutput {
	return o
}

func (o HeimdallPortsPtrOutput) Elem() HeimdallPortsOutput {
	return o.ApplyT(func(v *HeimdallPorts) HeimdallPorts {
		if v != nil {
			return *v
		}
		var ret HeimdallPorts
		return ret
	}).(HeimdallPortsOutput)
}

// External port to expose container port 80.
func (o HeimdallPortsPtrOutput) Http() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *HeimdallPorts) *float64 {
		if v == nil {
			return nil
		}
		return v.Http
	}).(pulumi.Float64PtrOutput)
}

// External port to expose container port 443.
func (o HeimdallPortsPtrOutput) Https() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *HeimdallPorts) *float64 {
		if v == nil {
			return nil
		}
		return v.Https
	}).(pulumi.Float64PtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HeimdallPortsInput)(nil)).Elem(), HeimdallPortsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeimdallPortsPtrInput)(nil)).Elem(), HeimdallPortsArgs{})
	pulumi.RegisterOutputType(HeimdallPortsOutput{})
	pulumi.RegisterOutputType(HeimdallPortsPtrOutput{})
}
