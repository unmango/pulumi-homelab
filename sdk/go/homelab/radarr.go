// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package homelab

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Radarr struct {
	pulumi.ResourceState
}

// NewRadarr registers a new resource with the given unique name, arguments, and options.
func NewRadarr(ctx *pulumi.Context,
	name string, args *RadarrArgs, opts ...pulumi.ResourceOption) (*Radarr, error) {
	if args == nil {
		args = &RadarrArgs{}
	}

	var resource Radarr
	err := ctx.RegisterRemoteComponentResource("homelab:index/kubernetes/linuxserver:Radarr", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type radarrArgs struct {
	Deployment *Deployment `pulumi:"deployment"`
	Image      interface{} `pulumi:"image"`
	// Optional name override.
	Name *string `pulumi:"name"`
	// Namespace to provision resources in.
	Namespace *string  `pulumi:"namespace"`
	Service   *Service `pulumi:"service"`
}

// The set of arguments for constructing a Radarr resource.
type RadarrArgs struct {
	Deployment DeploymentPtrInput
	Image      pulumi.Input
	// Optional name override.
	Name pulumi.StringPtrInput
	// Namespace to provision resources in.
	Namespace pulumi.StringPtrInput
	Service   ServicePtrInput
}

func (RadarrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*radarrArgs)(nil)).Elem()
}

type RadarrInput interface {
	pulumi.Input

	ToRadarrOutput() RadarrOutput
	ToRadarrOutputWithContext(ctx context.Context) RadarrOutput
}

func (*Radarr) ElementType() reflect.Type {
	return reflect.TypeOf((*Radarr)(nil))
}

func (i *Radarr) ToRadarrOutput() RadarrOutput {
	return i.ToRadarrOutputWithContext(context.Background())
}

func (i *Radarr) ToRadarrOutputWithContext(ctx context.Context) RadarrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RadarrOutput)
}

func (i *Radarr) ToRadarrPtrOutput() RadarrPtrOutput {
	return i.ToRadarrPtrOutputWithContext(context.Background())
}

func (i *Radarr) ToRadarrPtrOutputWithContext(ctx context.Context) RadarrPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RadarrPtrOutput)
}

type RadarrPtrInput interface {
	pulumi.Input

	ToRadarrPtrOutput() RadarrPtrOutput
	ToRadarrPtrOutputWithContext(ctx context.Context) RadarrPtrOutput
}

type radarrPtrType RadarrArgs

func (*radarrPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Radarr)(nil))
}

func (i *radarrPtrType) ToRadarrPtrOutput() RadarrPtrOutput {
	return i.ToRadarrPtrOutputWithContext(context.Background())
}

func (i *radarrPtrType) ToRadarrPtrOutputWithContext(ctx context.Context) RadarrPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RadarrPtrOutput)
}

// RadarrArrayInput is an input type that accepts RadarrArray and RadarrArrayOutput values.
// You can construct a concrete instance of `RadarrArrayInput` via:
//
//          RadarrArray{ RadarrArgs{...} }
type RadarrArrayInput interface {
	pulumi.Input

	ToRadarrArrayOutput() RadarrArrayOutput
	ToRadarrArrayOutputWithContext(context.Context) RadarrArrayOutput
}

type RadarrArray []RadarrInput

func (RadarrArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Radarr)(nil))
}

func (i RadarrArray) ToRadarrArrayOutput() RadarrArrayOutput {
	return i.ToRadarrArrayOutputWithContext(context.Background())
}

func (i RadarrArray) ToRadarrArrayOutputWithContext(ctx context.Context) RadarrArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RadarrArrayOutput)
}

// RadarrMapInput is an input type that accepts RadarrMap and RadarrMapOutput values.
// You can construct a concrete instance of `RadarrMapInput` via:
//
//          RadarrMap{ "key": RadarrArgs{...} }
type RadarrMapInput interface {
	pulumi.Input

	ToRadarrMapOutput() RadarrMapOutput
	ToRadarrMapOutputWithContext(context.Context) RadarrMapOutput
}

type RadarrMap map[string]RadarrInput

func (RadarrMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Radarr)(nil))
}

func (i RadarrMap) ToRadarrMapOutput() RadarrMapOutput {
	return i.ToRadarrMapOutputWithContext(context.Background())
}

func (i RadarrMap) ToRadarrMapOutputWithContext(ctx context.Context) RadarrMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RadarrMapOutput)
}

type RadarrOutput struct {
	*pulumi.OutputState
}

func (RadarrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Radarr)(nil))
}

func (o RadarrOutput) ToRadarrOutput() RadarrOutput {
	return o
}

func (o RadarrOutput) ToRadarrOutputWithContext(ctx context.Context) RadarrOutput {
	return o
}

func (o RadarrOutput) ToRadarrPtrOutput() RadarrPtrOutput {
	return o.ToRadarrPtrOutputWithContext(context.Background())
}

func (o RadarrOutput) ToRadarrPtrOutputWithContext(ctx context.Context) RadarrPtrOutput {
	return o.ApplyT(func(v Radarr) *Radarr {
		return &v
	}).(RadarrPtrOutput)
}

type RadarrPtrOutput struct {
	*pulumi.OutputState
}

func (RadarrPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Radarr)(nil))
}

func (o RadarrPtrOutput) ToRadarrPtrOutput() RadarrPtrOutput {
	return o
}

func (o RadarrPtrOutput) ToRadarrPtrOutputWithContext(ctx context.Context) RadarrPtrOutput {
	return o
}

type RadarrArrayOutput struct{ *pulumi.OutputState }

func (RadarrArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Radarr)(nil))
}

func (o RadarrArrayOutput) ToRadarrArrayOutput() RadarrArrayOutput {
	return o
}

func (o RadarrArrayOutput) ToRadarrArrayOutputWithContext(ctx context.Context) RadarrArrayOutput {
	return o
}

func (o RadarrArrayOutput) Index(i pulumi.IntInput) RadarrOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Radarr {
		return vs[0].([]Radarr)[vs[1].(int)]
	}).(RadarrOutput)
}

type RadarrMapOutput struct{ *pulumi.OutputState }

func (RadarrMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Radarr)(nil))
}

func (o RadarrMapOutput) ToRadarrMapOutput() RadarrMapOutput {
	return o
}

func (o RadarrMapOutput) ToRadarrMapOutputWithContext(ctx context.Context) RadarrMapOutput {
	return o
}

func (o RadarrMapOutput) MapIndex(k pulumi.StringInput) RadarrOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Radarr {
		return vs[0].(map[string]Radarr)[vs[1].(string)]
	}).(RadarrOutput)
}

func init() {
	pulumi.RegisterOutputType(RadarrOutput{})
	pulumi.RegisterOutputType(RadarrPtrOutput{})
	pulumi.RegisterOutputType(RadarrArrayOutput{})
	pulumi.RegisterOutputType(RadarrMapOutput{})
}
