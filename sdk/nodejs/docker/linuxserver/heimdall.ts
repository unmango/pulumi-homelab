// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

import * as pulumiDocker from "@pulumi/docker";

export class Heimdall extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'homelab:docker/linuxserver:Heimdall';

    /**
     * Returns true if the given object is an instance of Heimdall.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Heimdall {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Heimdall.__pulumiType;
    }

    /**
     * Heimdall container resource.
     */
    public /*out*/ readonly container!: pulumi.Output<pulumiDocker.Container>;
    /**
     * Linuxserver Heimdall image resource.
     */
    public /*out*/ readonly image!: pulumi.Output<pulumiDocker.RemoteImage>;

    /**
     * Create a Heimdall resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: HeimdallArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["configPath"] = args ? args.configPath : undefined;
            resourceInputs["ports"] = args ? args.ports : undefined;
            resourceInputs["restart"] = args ? args.restart : undefined;
            resourceInputs["container"] = undefined /*out*/;
            resourceInputs["image"] = undefined /*out*/;
        } else {
            resourceInputs["container"] = undefined /*out*/;
            resourceInputs["image"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Heimdall.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a Heimdall resource.
 */
export interface HeimdallArgs {
    /**
     * Host path to mount to /config in the container.
     */
    configPath?: pulumi.Input<string>;
    /**
     * Port arguments for the container.
     */
    ports?: pulumi.Input<inputs.docker.linuxserver.HeimdallPortsArgs>;
    /**
     * Container restart policy.
     */
    restart?: pulumi.Input<enums.docker.RestartPolicy>;
}
