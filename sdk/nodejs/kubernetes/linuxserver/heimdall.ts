// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

import * as pulumiKubernetes from "@pulumi/kubernetes";

/**
 * Heimdall is a way to organise all those links to your most
 * used web sites and web applications in a simple way.
 * https://github.com/linuxserver/docker-heimdall
 */
export class Heimdall extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'homelab:kubernetes/linuxserver:Heimdall';

    /**
     * Returns true if the given object is an instance of Heimdall.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Heimdall {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Heimdall.__pulumiType;
    }

    /**
     * Heimdall service object.
     */
    public readonly service!: pulumi.Output<pulumiKubernetes.core.v1.Service>;
    /**
     * Heimdall stateful set object.
     */
    public /*out*/ readonly statefulSet!: pulumi.Output<pulumiKubernetes.apps.v1.StatefulSet>;

    /**
     * Create a Heimdall resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: HeimdallArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["persistence"] = args ? (args.persistence ? pulumi.output(args.persistence).apply(inputs.kubernetes.linuxserver.heimdallPersistenceArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["pgid"] = args ? args.pgid : undefined;
            resourceInputs["puid"] = args ? args.puid : undefined;
            resourceInputs["service"] = args ? args.service : undefined;
            resourceInputs["tz"] = args ? args.tz : undefined;
            resourceInputs["statefulSet"] = undefined /*out*/;
        } else {
            resourceInputs["service"] = undefined /*out*/;
            resourceInputs["statefulSet"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Heimdall.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a Heimdall resource.
 */
export interface HeimdallArgs {
    /**
     * The namespace to put resources in.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Heidmall persistence options.
     */
    persistence?: pulumi.Input<inputs.kubernetes.linuxserver.HeimdallPersistenceArgs>;
    /**
     * The user id to run the container as.
     * See https://github.com/linuxserver/docker-heimdall#user--group-identifiers
     */
    pgid?: pulumi.Input<string>;
    /**
     * The group id to run the container as.
     * See https://github.com/linuxserver/docker-heimdall#user--group-identifiers
     */
    puid?: pulumi.Input<string>;
    /**
     * Arguments for the kubernetes service.
     */
    service?: pulumi.Input<inputs.kubernetes.linuxserver.HeimdallServiceArgs>;
    /**
     * The timezone to use.
     */
    tz?: pulumi.Input<string>;
}
