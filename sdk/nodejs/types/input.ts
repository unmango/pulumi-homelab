// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";

import * as utilities from "../utilities";

export namespace k8s {
    export interface DeploymentArgs {
        /**
         * Deployment strategy to use.
         */
        strategy?: pulumi.Input<inputs.k8s.DeploymentStrategyArgs>;
    }
    /**
     * deploymentArgsProvideDefaults sets the appropriate defaults for DeploymentArgs
     */
    export function deploymentArgsProvideDefaults(val: DeploymentArgs): DeploymentArgs {
        return {
            ...val,
            strategy: (val.strategy ? pulumi.output(val.strategy).apply(inputs.k8s.deploymentStrategyArgsProvideDefaults) : undefined),
        };
    }

    export interface DeploymentStrategyArgs {
        /**
         * Type of deployment strategy.
         */
        type?: pulumi.Input<enums.k8s.DeploymentStrategyType>;
    }
    /**
     * deploymentStrategyArgsProvideDefaults sets the appropriate defaults for DeploymentStrategyArgs
     */
    export function deploymentStrategyArgsProvideDefaults(val: DeploymentStrategyArgs): DeploymentStrategyArgs {
        return {
            ...val,
            type: (val.type) ?? "Recreate",
        };
    }

    export interface ImageArgs {
        /**
         * Registry to use for the image. e.g. 'lcsr.io'
         */
        registry?: pulumi.Input<string>;
        /**
         * Repository to use for the image. e.g. 'linuxserver'
         */
        repository?: pulumi.Input<string>;
        /**
         * Tag to use for the image. e.g. 'latest'
         */
        tag?: pulumi.Input<string>;
    }

    /**
     * Arguments for specifying an existing persistent volume claim.
     */
    export interface PersistentVolumeClaimExistingClaimArgs {
        /**
         * Existing volume claim to use.
         */
        existingClaim: pulumi.Input<string>;
        /**
         * Path within the volume to mount.
         */
        subPath?: pulumi.Input<string>;
        /**
         * Type of persistent volume claim.
         * Expected value is 'existingClaim'
         */
        type: pulumi.Input<"existingClaim">;
    }

    /**
     * Options for creating a persistent volume claim from a storage class.
     */
    export interface PersistentVolumeClaimStorageClassArgs {
        /**
         * Access mode for the volume.
         */
        accessMode?: pulumi.Input<string>;
        /**
         * Size of the volume.
         */
        size?: pulumi.Input<string>;
        /**
         * Storage class to use to provision the volume.
         */
        storageClass: pulumi.Input<string>;
        /**
         * Path within the volume to mount.
         */
        subPath?: pulumi.Input<string>;
        /**
         * Type of persistent volume claim.
         * Expected value is 'storageClass'
         */
        type: pulumi.Input<"storageClass">;
    }
    /**
     * persistentVolumeClaimStorageClassArgsProvideDefaults sets the appropriate defaults for PersistentVolumeClaimStorageClassArgs
     */
    export function persistentVolumeClaimStorageClassArgsProvideDefaults(val: PersistentVolumeClaimStorageClassArgs): PersistentVolumeClaimStorageClassArgs {
        return {
            ...val,
            accessMode: (val.accessMode) ?? "ReadWriteOnce",
        };
    }

    export interface ServiceArgs {
        /**
         * Optional service name.
         */
        name?: pulumi.Input<string>;
        /**
         * Type of service to deploy.
         */
        type: pulumi.Input<enums.k8s.ServiceType>;
    }
    export namespace linuxserver {
        /**
         * Radarr persistence options
         */
        export interface RadarrPersistenceArgs {
            /**
             * Configuration persistence arguments
             */
            config?: pulumi.Input<inputs.k8s.PersistentVolumeClaimExistingClaimArgs> | pulumi.Input<inputs.k8s.PersistentVolumeClaimStorageClassArgs>;
            /**
             * Downloads persistence arguments
             */
            downloads?: pulumi.Input<inputs.k8s.PersistentVolumeClaimExistingClaimArgs> | pulumi.Input<inputs.k8s.PersistentVolumeClaimStorageClassArgs>;
            /**
             * Movies persistence arguments
             */
            movies?: pulumi.Input<inputs.k8s.PersistentVolumeClaimExistingClaimArgs> | pulumi.Input<inputs.k8s.PersistentVolumeClaimStorageClassArgs>;
        }
    }
}
