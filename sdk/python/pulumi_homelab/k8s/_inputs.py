# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'DeploymentStrategyArgs',
    'DeploymentArgs',
    'ImageArgs',
    'PersistentVolumeClaimExistingClaimArgs',
    'PersistentVolumeClaimStorageClassArgs',
    'ServiceArgs',
]

@pulumi.input_type
class DeploymentStrategyArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input['DeploymentStrategyType']] = None):
        """
        :param pulumi.Input['DeploymentStrategyType'] type: Type of deployment strategy.
        """
        if type is None:
            type = 'Recreate'
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['DeploymentStrategyType']]:
        """
        Type of deployment strategy.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['DeploymentStrategyType']]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DeploymentArgs:
    def __init__(__self__, *,
                 strategy: Optional[pulumi.Input['DeploymentStrategyArgs']] = None):
        """
        :param pulumi.Input['DeploymentStrategyArgs'] strategy: Deployment strategy to use.
        """
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input['DeploymentStrategyArgs']]:
        """
        Deployment strategy to use.
        """
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input['DeploymentStrategyArgs']]):
        pulumi.set(self, "strategy", value)


@pulumi.input_type
class ImageArgs:
    def __init__(__self__, *,
                 registry: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] registry: Registry to use for the image. e.g. 'lcsr.io'
        :param pulumi.Input[str] repository: Repository to use for the image. e.g. 'linuxserver'
        :param pulumi.Input[str] tag: Tag to use for the image. e.g. 'latest'
        """
        if registry is not None:
            pulumi.set(__self__, "registry", registry)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def registry(self) -> Optional[pulumi.Input[str]]:
        """
        Registry to use for the image. e.g. 'lcsr.io'
        """
        return pulumi.get(self, "registry")

    @registry.setter
    def registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registry", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        Repository to use for the image. e.g. 'linuxserver'
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        Tag to use for the image. e.g. 'latest'
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class PersistentVolumeClaimExistingClaimArgs:
    def __init__(__self__, *,
                 existing_claim: pulumi.Input[str],
                 type: pulumi.Input[str],
                 sub_path: Optional[pulumi.Input[str]] = None):
        """
        Arguments for specifying an existing persistent volume claim.
        :param pulumi.Input[str] existing_claim: Existing volume claim to use.
        :param pulumi.Input[str] type: Type of persistent volume claim.
               Expected value is 'existingClaim'
        :param pulumi.Input[str] sub_path: Path within the volume to mount.
        """
        pulumi.set(__self__, "existing_claim", existing_claim)
        pulumi.set(__self__, "type", 'existingClaim')
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)

    @property
    @pulumi.getter(name="existingClaim")
    def existing_claim(self) -> pulumi.Input[str]:
        """
        Existing volume claim to use.
        """
        return pulumi.get(self, "existing_claim")

    @existing_claim.setter
    def existing_claim(self, value: pulumi.Input[str]):
        pulumi.set(self, "existing_claim", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of persistent volume claim.
        Expected value is 'existingClaim'
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path within the volume to mount.
        """
        return pulumi.get(self, "sub_path")

    @sub_path.setter
    def sub_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path", value)


@pulumi.input_type
class PersistentVolumeClaimStorageClassArgs:
    def __init__(__self__, *,
                 storage_class: pulumi.Input[str],
                 type: pulumi.Input[str],
                 access_mode: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 sub_path: Optional[pulumi.Input[str]] = None):
        """
        Options for creating a persistent volume claim from a storage class.
        :param pulumi.Input[str] storage_class: Storage class to use to provision the volume.
        :param pulumi.Input[str] type: Type of persistent volume claim.
               Expected value is 'storageClass'
        :param pulumi.Input[str] access_mode: Access mode for the volume.
        :param pulumi.Input[str] size: Size of the volume.
        :param pulumi.Input[str] sub_path: Path within the volume to mount.
        """
        pulumi.set(__self__, "storage_class", storage_class)
        pulumi.set(__self__, "type", 'storageClass')
        if access_mode is None:
            access_mode = 'ReadWriteOnce'
        if access_mode is not None:
            pulumi.set(__self__, "access_mode", access_mode)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> pulumi.Input[str]:
        """
        Storage class to use to provision the volume.
        """
        return pulumi.get(self, "storage_class")

    @storage_class.setter
    def storage_class(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_class", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of persistent volume claim.
        Expected value is 'storageClass'
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="accessMode")
    def access_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Access mode for the volume.
        """
        return pulumi.get(self, "access_mode")

    @access_mode.setter
    def access_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_mode", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        Size of the volume.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path within the volume to mount.
        """
        return pulumi.get(self, "sub_path")

    @sub_path.setter
    def sub_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path", value)


@pulumi.input_type
class ServiceArgs:
    def __init__(__self__, *,
                 type: pulumi.Input['ServiceType'],
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ServiceType'] type: Type of service to deploy.
        :param pulumi.Input[str] name: Optional service name.
        """
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['ServiceType']:
        """
        Type of service to deploy.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['ServiceType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Optional service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


