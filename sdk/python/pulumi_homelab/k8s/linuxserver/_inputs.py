# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ... import k8s as _k8s

__all__ = [
    'RadarrPersistenceArgs',
]

@pulumi.input_type
class RadarrPersistenceArgs:
    def __init__(__self__, *,
                 config: Optional[Union[pulumi.Input['_k8s.PersistentVolumeClaimExistingClaimArgs'], pulumi.Input['_k8s.PersistentVolumeClaimStorageClassArgs']]] = None,
                 downloads: Optional[Union[pulumi.Input['_k8s.PersistentVolumeClaimExistingClaimArgs'], pulumi.Input['_k8s.PersistentVolumeClaimStorageClassArgs']]] = None,
                 movies: Optional[Union[pulumi.Input['_k8s.PersistentVolumeClaimExistingClaimArgs'], pulumi.Input['_k8s.PersistentVolumeClaimStorageClassArgs']]] = None):
        """
        Radarr persistence options
        :param Union[pulumi.Input['_k8s.PersistentVolumeClaimExistingClaimArgs'], pulumi.Input['_k8s.PersistentVolumeClaimStorageClassArgs']] config: Configuration persistence arguments
        :param Union[pulumi.Input['_k8s.PersistentVolumeClaimExistingClaimArgs'], pulumi.Input['_k8s.PersistentVolumeClaimStorageClassArgs']] downloads: Downloads persistence arguments
        :param Union[pulumi.Input['_k8s.PersistentVolumeClaimExistingClaimArgs'], pulumi.Input['_k8s.PersistentVolumeClaimStorageClassArgs']] movies: Movies persistence arguments
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if downloads is not None:
            pulumi.set(__self__, "downloads", downloads)
        if movies is not None:
            pulumi.set(__self__, "movies", movies)

    @property
    @pulumi.getter
    def config(self) -> Optional[Union[pulumi.Input['_k8s.PersistentVolumeClaimExistingClaimArgs'], pulumi.Input['_k8s.PersistentVolumeClaimStorageClassArgs']]]:
        """
        Configuration persistence arguments
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[Union[pulumi.Input['_k8s.PersistentVolumeClaimExistingClaimArgs'], pulumi.Input['_k8s.PersistentVolumeClaimStorageClassArgs']]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def downloads(self) -> Optional[Union[pulumi.Input['_k8s.PersistentVolumeClaimExistingClaimArgs'], pulumi.Input['_k8s.PersistentVolumeClaimStorageClassArgs']]]:
        """
        Downloads persistence arguments
        """
        return pulumi.get(self, "downloads")

    @downloads.setter
    def downloads(self, value: Optional[Union[pulumi.Input['_k8s.PersistentVolumeClaimExistingClaimArgs'], pulumi.Input['_k8s.PersistentVolumeClaimStorageClassArgs']]]):
        pulumi.set(self, "downloads", value)

    @property
    @pulumi.getter
    def movies(self) -> Optional[Union[pulumi.Input['_k8s.PersistentVolumeClaimExistingClaimArgs'], pulumi.Input['_k8s.PersistentVolumeClaimStorageClassArgs']]]:
        """
        Movies persistence arguments
        """
        return pulumi.get(self, "movies")

    @movies.setter
    def movies(self, value: Optional[Union[pulumi.Input['_k8s.PersistentVolumeClaimExistingClaimArgs'], pulumi.Input['_k8s.PersistentVolumeClaimStorageClassArgs']]]):
        pulumi.set(self, "movies", value)


