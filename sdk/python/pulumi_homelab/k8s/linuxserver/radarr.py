# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ... import k8s
from ... import k8s as _k8s
from ._inputs import *
import pulumi_kubernetes

__all__ = ['RadarrArgs', 'Radarr']

@pulumi.input_type
class RadarrArgs:
    def __init__(__self__, *,
                 deployment: Optional[pulumi.Input['_k8s.DeploymentArgs']] = None,
                 image: Optional[pulumi.Input[Union[str, '_k8s.ImageArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 persistence: Optional['RadarrPersistenceArgs'] = None,
                 pgid: Optional[pulumi.Input[str]] = None,
                 puid: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input['_k8s.ServiceArgs']] = None,
                 tz: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Radarr resource.
        :param pulumi.Input['_k8s.DeploymentArgs'] deployment: Arguments for the kubernetes deployment.
        :param pulumi.Input[Union[str, '_k8s.ImageArgs']] image: Optional custom image to use.
        :param pulumi.Input[str] name: Optional name override.
        :param pulumi.Input[str] namespace: Namespace to provision resources in.
        :param 'RadarrPersistenceArgs' persistence: Options for persistence.
        :param pulumi.Input[str] pgid: Group ID to run as.
        :param pulumi.Input[str] puid: User ID to run as.
        :param pulumi.Input['_k8s.ServiceArgs'] service: Arguments for the kubernetes service.
        :param pulumi.Input[str] tz: Timezone to use. e.g. Europe/London
        """
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)
        if pgid is not None:
            pulumi.set(__self__, "pgid", pgid)
        if puid is not None:
            pulumi.set(__self__, "puid", puid)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if tz is None:
            tz = 'Europe/London'
        if tz is not None:
            pulumi.set(__self__, "tz", tz)

    @property
    @pulumi.getter
    def deployment(self) -> Optional[pulumi.Input['_k8s.DeploymentArgs']]:
        """
        Arguments for the kubernetes deployment.
        """
        return pulumi.get(self, "deployment")

    @deployment.setter
    def deployment(self, value: Optional[pulumi.Input['_k8s.DeploymentArgs']]):
        pulumi.set(self, "deployment", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[Union[str, '_k8s.ImageArgs']]]:
        """
        Optional custom image to use.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[Union[str, '_k8s.ImageArgs']]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Optional name override.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace to provision resources in.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def persistence(self) -> Optional['RadarrPersistenceArgs']:
        """
        Options for persistence.
        """
        return pulumi.get(self, "persistence")

    @persistence.setter
    def persistence(self, value: Optional['RadarrPersistenceArgs']):
        pulumi.set(self, "persistence", value)

    @property
    @pulumi.getter
    def pgid(self) -> Optional[pulumi.Input[str]]:
        """
        Group ID to run as.
        """
        return pulumi.get(self, "pgid")

    @pgid.setter
    def pgid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pgid", value)

    @property
    @pulumi.getter
    def puid(self) -> Optional[pulumi.Input[str]]:
        """
        User ID to run as.
        """
        return pulumi.get(self, "puid")

    @puid.setter
    def puid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "puid", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input['_k8s.ServiceArgs']]:
        """
        Arguments for the kubernetes service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input['_k8s.ServiceArgs']]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def tz(self) -> Optional[pulumi.Input[str]]:
        """
        Timezone to use. e.g. Europe/London
        """
        return pulumi.get(self, "tz")

    @tz.setter
    def tz(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tz", value)


class Radarr(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 deployment: Optional[pulumi.Input[pulumi.InputType['_k8s.DeploymentArgs']]] = None,
                 image: Optional[pulumi.Input[Union[str, pulumi.InputType['_k8s.ImageArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 persistence: Optional[pulumi.InputType['RadarrPersistenceArgs']] = None,
                 pgid: Optional[pulumi.Input[str]] = None,
                 puid: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[pulumi.InputType['_k8s.ServiceArgs']]] = None,
                 tz: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Radarr resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['_k8s.DeploymentArgs']] deployment: Arguments for the kubernetes deployment.
        :param pulumi.Input[Union[str, pulumi.InputType['_k8s.ImageArgs']]] image: Optional custom image to use.
        :param pulumi.Input[str] name: Optional name override.
        :param pulumi.Input[str] namespace: Namespace to provision resources in.
        :param pulumi.InputType['RadarrPersistenceArgs'] persistence: Options for persistence.
        :param pulumi.Input[str] pgid: Group ID to run as.
        :param pulumi.Input[str] puid: User ID to run as.
        :param pulumi.Input[pulumi.InputType['_k8s.ServiceArgs']] service: Arguments for the kubernetes service.
        :param pulumi.Input[str] tz: Timezone to use. e.g. Europe/London
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[RadarrArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Radarr resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param RadarrArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RadarrArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 deployment: Optional[pulumi.Input[pulumi.InputType['_k8s.DeploymentArgs']]] = None,
                 image: Optional[pulumi.Input[Union[str, pulumi.InputType['_k8s.ImageArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 persistence: Optional[pulumi.InputType['RadarrPersistenceArgs']] = None,
                 pgid: Optional[pulumi.Input[str]] = None,
                 puid: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[pulumi.InputType['_k8s.ServiceArgs']]] = None,
                 tz: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RadarrArgs.__new__(RadarrArgs)

            __props__.__dict__["deployment"] = deployment
            __props__.__dict__["image"] = image
            __props__.__dict__["name"] = name
            __props__.__dict__["namespace"] = namespace
            __props__.__dict__["persistence"] = persistence
            __props__.__dict__["pgid"] = pgid
            __props__.__dict__["puid"] = puid
            __props__.__dict__["service"] = service
            if tz is None:
                tz = 'Europe/London'
            __props__.__dict__["tz"] = tz
            __props__.__dict__["port"] = None
            __props__.__dict__["service_name"] = None
        super(Radarr, __self__).__init__(
            'homelab:k8s/linuxserver:Radarr',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter
    def deployment(self) -> pulumi.Output['pulumi_kubernetes.apps.v1.Deployment']:
        """
        Radarr deployment.
        """
        return pulumi.get(self, "deployment")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[float]:
        """
        Radarr service port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def service(self) -> pulumi.Output['pulumi_kubernetes.core.v1.Service']:
        """
        Radarr service.
        """
        return pulumi.get(self, "service")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Output[str]:
        """
        Radarr service name.
        """
        return pulumi.get(self, "service_name")

