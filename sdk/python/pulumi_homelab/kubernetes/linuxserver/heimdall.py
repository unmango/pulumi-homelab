# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ... import kubernetes
from ... import linuxserver as _linuxserver
from ._inputs import *
import pulumi_kubernetes

__all__ = ['HeimdallArgs', 'Heimdall']

@pulumi.input_type
class HeimdallArgs:
    def __init__(__self__, *,
                 namespace: Optional[pulumi.Input[str]] = None,
                 persistence: Optional[pulumi.Input['HeimdallPersistenceArgs']] = None,
                 pgid: Optional[pulumi.Input[str]] = None,
                 puid: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input['HeimdallServiceArgs']] = None,
                 tz: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Heimdall resource.
        :param pulumi.Input[str] namespace: The namespace to put resources in.
        :param pulumi.Input['HeimdallPersistenceArgs'] persistence: Heidmall persistence options.
        :param pulumi.Input[str] pgid: The user id to run the container as.
               See https://github.com/linuxserver/docker-heimdall#user--group-identifiers
        :param pulumi.Input[str] puid: The group id to run the container as.
               See https://github.com/linuxserver/docker-heimdall#user--group-identifiers
        :param pulumi.Input['HeimdallServiceArgs'] service: Arguments for the kubernetes service.
        :param pulumi.Input[str] tz: The timezone to use.
        """
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)
        if pgid is not None:
            pulumi.set(__self__, "pgid", pgid)
        if puid is not None:
            pulumi.set(__self__, "puid", puid)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if tz is not None:
            pulumi.set(__self__, "tz", tz)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The namespace to put resources in.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def persistence(self) -> Optional[pulumi.Input['HeimdallPersistenceArgs']]:
        """
        Heidmall persistence options.
        """
        return pulumi.get(self, "persistence")

    @persistence.setter
    def persistence(self, value: Optional[pulumi.Input['HeimdallPersistenceArgs']]):
        pulumi.set(self, "persistence", value)

    @property
    @pulumi.getter
    def pgid(self) -> Optional[pulumi.Input[str]]:
        """
        The user id to run the container as.
        See https://github.com/linuxserver/docker-heimdall#user--group-identifiers
        """
        return pulumi.get(self, "pgid")

    @pgid.setter
    def pgid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pgid", value)

    @property
    @pulumi.getter
    def puid(self) -> Optional[pulumi.Input[str]]:
        """
        The group id to run the container as.
        See https://github.com/linuxserver/docker-heimdall#user--group-identifiers
        """
        return pulumi.get(self, "puid")

    @puid.setter
    def puid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "puid", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input['HeimdallServiceArgs']]:
        """
        Arguments for the kubernetes service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input['HeimdallServiceArgs']]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def tz(self) -> Optional[pulumi.Input[str]]:
        """
        The timezone to use.
        """
        return pulumi.get(self, "tz")

    @tz.setter
    def tz(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tz", value)


class Heimdall(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 persistence: Optional[pulumi.Input[pulumi.InputType['HeimdallPersistenceArgs']]] = None,
                 pgid: Optional[pulumi.Input[str]] = None,
                 puid: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[pulumi.InputType['HeimdallServiceArgs']]] = None,
                 tz: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Heimdall is a way to organise all those links to your most
        used web sites and web applications in a simple way.
        https://github.com/linuxserver/docker-heimdall

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] namespace: The namespace to put resources in.
        :param pulumi.Input[pulumi.InputType['HeimdallPersistenceArgs']] persistence: Heidmall persistence options.
        :param pulumi.Input[str] pgid: The user id to run the container as.
               See https://github.com/linuxserver/docker-heimdall#user--group-identifiers
        :param pulumi.Input[str] puid: The group id to run the container as.
               See https://github.com/linuxserver/docker-heimdall#user--group-identifiers
        :param pulumi.Input[pulumi.InputType['HeimdallServiceArgs']] service: Arguments for the kubernetes service.
        :param pulumi.Input[str] tz: The timezone to use.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[HeimdallArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Heimdall is a way to organise all those links to your most
        used web sites and web applications in a simple way.
        https://github.com/linuxserver/docker-heimdall

        :param str resource_name: The name of the resource.
        :param HeimdallArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(HeimdallArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 persistence: Optional[pulumi.Input[pulumi.InputType['HeimdallPersistenceArgs']]] = None,
                 pgid: Optional[pulumi.Input[str]] = None,
                 puid: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[pulumi.InputType['HeimdallServiceArgs']]] = None,
                 tz: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = HeimdallArgs.__new__(HeimdallArgs)

            __props__.__dict__["namespace"] = namespace
            __props__.__dict__["persistence"] = persistence
            __props__.__dict__["pgid"] = pgid
            __props__.__dict__["puid"] = puid
            __props__.__dict__["service"] = service
            __props__.__dict__["tz"] = tz
            __props__.__dict__["stateful_set"] = None
        super(Heimdall, __self__).__init__(
            'homelab:kubernetes/linuxserver:Heimdall',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Output['pulumi_kubernetes.core.v1.Service']:
        """
        Heimdall service object.
        """
        return pulumi.get(self, "service")

    @property
    @pulumi.getter(name="statefulSet")
    def stateful_set(self) -> pulumi.Output['pulumi_kubernetes.apps.v1.StatefulSet']:
        """
        Heimdall stateful set object.
        """
        return pulumi.get(self, "stateful_set")

