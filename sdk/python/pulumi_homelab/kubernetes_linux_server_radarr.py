# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from ._enums import *
from ._inputs import *

__all__ = ['KubernetesLinuxServerRadarrArgs', 'KubernetesLinuxServerRadarr']

@pulumi.input_type
class KubernetesLinuxServerRadarrArgs:
    def __init__(__self__, *,
                 deployment: Optional[pulumi.Input['KubernetesDeploymentArgs']] = None,
                 image: Optional[pulumi.Input[Union[str, 'KubernetesImageArgsArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input['KubernetesServiceArgs']] = None):
        """
        The set of arguments for constructing a KubernetesLinuxServerRadarr resource.
        :param pulumi.Input[str] name: Optional name override.
        :param pulumi.Input[str] namespace: Namespace to provision resources in.
        """
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def deployment(self) -> Optional[pulumi.Input['KubernetesDeploymentArgs']]:
        return pulumi.get(self, "deployment")

    @deployment.setter
    def deployment(self, value: Optional[pulumi.Input['KubernetesDeploymentArgs']]):
        pulumi.set(self, "deployment", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[Union[str, 'KubernetesImageArgsArgs']]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[Union[str, 'KubernetesImageArgsArgs']]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Optional name override.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace to provision resources in.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input['KubernetesServiceArgs']]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input['KubernetesServiceArgs']]):
        pulumi.set(self, "service", value)


class KubernetesLinuxServerRadarr(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 deployment: Optional[pulumi.Input[pulumi.InputType['KubernetesDeploymentArgs']]] = None,
                 image: Optional[pulumi.Input[Union[str, pulumi.InputType['KubernetesImageArgsArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[pulumi.InputType['KubernetesServiceArgs']]] = None,
                 __props__=None):
        """
        Create a KubernetesLinuxServerRadarr resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: Optional name override.
        :param pulumi.Input[str] namespace: Namespace to provision resources in.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[KubernetesLinuxServerRadarrArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a KubernetesLinuxServerRadarr resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param KubernetesLinuxServerRadarrArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KubernetesLinuxServerRadarrArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 deployment: Optional[pulumi.Input[pulumi.InputType['KubernetesDeploymentArgs']]] = None,
                 image: Optional[pulumi.Input[Union[str, pulumi.InputType['KubernetesImageArgsArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[pulumi.InputType['KubernetesServiceArgs']]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KubernetesLinuxServerRadarrArgs.__new__(KubernetesLinuxServerRadarrArgs)

            __props__.__dict__["deployment"] = deployment
            __props__.__dict__["image"] = image
            __props__.__dict__["name"] = name
            __props__.__dict__["namespace"] = namespace
            __props__.__dict__["service"] = service
        super(KubernetesLinuxServerRadarr, __self__).__init__(
            'homelab:index:KubernetesLinuxServerRadarr',
            resource_name,
            __props__,
            opts,
            remote=True)

