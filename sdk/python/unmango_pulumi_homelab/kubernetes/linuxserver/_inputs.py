# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ... import kubernetes
from ... import linuxserver as _linuxserver

__all__ = [
    'HeimdallPersistenceArgs',
    'HeimdallServiceArgs',
]

@pulumi.input_type
class HeimdallPersistenceArgs:
    def __init__(__self__, *,
                 access_modes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 storage_class: Optional[pulumi.Input[str]] = None):
        """
        Heimdall persistence options.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] access_modes: Access modes for the persistent volume claim template.
        :param pulumi.Input[bool] enabled: Whether to enable persistence or not.
        :param pulumi.Input[str] size: Size of the volume to request from the storage class.
        :param pulumi.Input[str] storage_class: Name of the storage class to use in the persistent volume claim template.
        """
        if access_modes is not None:
            pulumi.set(__self__, "access_modes", access_modes)
        if enabled is None:
            enabled = False
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if size is None:
            size = '1Gi'
        if size is not None:
            pulumi.set(__self__, "size", size)
        if storage_class is not None:
            pulumi.set(__self__, "storage_class", storage_class)

    @property
    @pulumi.getter(name="accessModes")
    def access_modes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Access modes for the persistent volume claim template.
        """
        return pulumi.get(self, "access_modes")

    @access_modes.setter
    def access_modes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "access_modes", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable persistence or not.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        Size of the volume to request from the storage class.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the storage class to use in the persistent volume claim template.
        """
        return pulumi.get(self, "storage_class")

    @storage_class.setter
    def storage_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_class", value)


@pulumi.input_type
class HeimdallServiceArgs:
    def __init__(__self__, *,
                 ports: Optional[pulumi.Input['_linuxserver.HeimdallPortsArgs']] = None,
                 type: Optional[pulumi.Input['_kubernetes.ServiceType']] = None):
        """
        Arguments for the kubernetes service.
        :param pulumi.Input['_linuxserver.HeimdallPortsArgs'] ports: Port arguments for the container.
        :param pulumi.Input['_kubernetes.ServiceType'] type: Type of service to create.
        """
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input['_linuxserver.HeimdallPortsArgs']]:
        """
        Port arguments for the container.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input['_linuxserver.HeimdallPortsArgs']]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['_kubernetes.ServiceType']]:
        """
        Type of service to create.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['_kubernetes.ServiceType']]):
        pulumi.set(self, "type", value)


